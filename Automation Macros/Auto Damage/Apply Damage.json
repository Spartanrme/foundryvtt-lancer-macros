{
  "folder": "hwmTAtVuxU5leVYw",
  "name": "Apply Damage",
  "type": "script",
  "author": "MvcpNQWP7WQx6BPR",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "// This section handles integration with auto-apply damage macro.\nlet dmg = typeof args != 'undefined' && typeof args[0] == \"number\" ? args[0] : null;\n\nlet windowCount = scope.windowCount ? scope.windowCount : 1;\nlet windowTotal = scope.windowTotal ? scope.windowTotal : 1;\nlet windowText = `<div class=\"flexcol\">${windowCount}/${windowTotal}</div>`;\nlet helpText = ``;\n\n// NPC damage reductions\nlet npcReductions = await game.macros.getName(\"Get-NPC-Damage-Reductions\").execute();\nlet uiNpcReductions = ``;\nfor(let i = 0; i < npcReductions.length; i++){\n  let dots = \"\";\n  if(npcReductions[i].length > 75)\n    dots = \"...\"\n  uiNpcReductions += `<label><span>--` + npcReductions[i].substring(0, 75) + dots + `</span></label>`;\n}\n\nlet weaponStyle = \"color:white\";\nlet burnStyle = \"color:white\";\nlet heatStyle = \"color:white\";\n\nlet weaponIcon = \"cci cci-reticule i--l\"; // Default icon for weapon damage\n\nif (typeof args != 'undefined' && typeof args[1] == \"string\") {\n    let type = args[1];\n    if (type == \"heat\") {\n        heatStyle = \"color:#e74210\";\n        helpText += \"// Detected Damage is Heat::Click Heat to Apply //\"\n    } else if (type == \"burn\") {\n        burnStyle = \"color:#ce871e\";\n        helpText += \"// Detected Damage is Burn::Click Burn to Apply //\"\n    } else if (type == \"kinetic\") {\n        weaponStyle = \"color:#616161\";\n        weaponIcon = \"cci cci-kinetic i--l\"; // Icon for kinetic damage\n        helpText += \"// Detected Damage is Kinetic::Click Damage to Apply //\"\n    } else if (type == \"energy\") {\n        weaponStyle = \"color:#2195ca\";\n        weaponIcon = \"cci cci-energy i--l\"; // Icon for energy damage\n        helpText += \"// Detected Damage is Energy::Click Damage to Apply //\"\n    } else if (type == \"explosive\") {\n        weaponStyle = \"color:#fca017\";\n        weaponIcon = \"cci cci-explosive i--l\"; // Icon for explosive damage\n        helpText += \"// Detected Damage is Explosive::Click Damage to Apply //\"\n    } else {\n        weaponStyle = \"color:blue\";\n        helpText += \"// Detected Damage is Unknown::Click something! //\"\n    }\n}\n\nconst htmlFormContent = `<form class=\"lancer accdiff window-content\">\n    <div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\">\n        <div class=\"flexcol\">\n            <label class=\"container\">\n                <h3 class=\"lancer-border-primary\">Damage</h3>\n                <input type=\"number\" value=${dmg} name=\"damage_amount\" class=\"lancer-text-field grow\"\n                style=\"color:var(--color-text-dark-primary, black); text-align: center;\"/>\n            </label>\n            <label class=\"container\">\n              <i>(Don't subtract armor)</i>\n            </label>\n            ${uiNpcReductions}\n        </div>\n        <div class=\"flexcol\">\n            <h3 class=\"lancer-border-primary\">Modifiers</h3>\n            <label class=\"container\" style=\"order: 2;\">\n                <input type=\"checkbox\" name=\"has_resistance\">\n                <span class=\"checkmark\">Resistance</span>\n            </label><br/>\n            <label class=\"container\" style=\"order: 0;\">\n                <input type=\"checkbox\" name=\"is_exposed\"> Exposed\n            </label>\n            <label class=\"container\" style=\"order: 1;\">\n                <input type=\"checkbox\" name=\"attack_is_piercing\"> Armor Piercing\n            </label>\n        </div>\n    </div>\n    <div class=\"flexrow\" style=\"padding-top: 4px;\">\n      ${helpText}\n    </div>\n    <div class=\"flexrow\" style=\"padding-top: 4px;\">\n        <div class=\"flexcol\">\n            <button name=\"dmgType\" value=\"Weapon\" type=\"button\" style=\"background-color: #333333; color: white;\">\n                <i class=\"${weaponIcon}\" style=\"${weaponStyle}\"></i></br>Damage\n            </button>\n        </div>\n        <div class=\"flexcol\">\n            <button name=\"dmgType\" value=\"Burn\" type=\"button\" style=\"background-color: #333333; color: white;\">\n                <i class=\"cci cci-burn i--l\" style=\"${burnStyle}\"></i></br>Burn\n            </button>\n        </div>\n        <div class=\"flexcol\">\n            <button name=\"dmgType\" value=\"Heat\" type=\"button\" style=\"background-color: #333333; color: white;\">\n                <i class=\"cci cci-heat i--l\" style=\"${heatStyle}\"></i></br>Heat\n            </button>\n        </div>\n    </div>\n    <div class=\"flexrow\" style=\"padding-top: 4px;\"/>\n    ${windowText}\n</form>`;\n\n\nfunction handleButtonClick(html, event) {\n  const targetElement = event.currentTarget;\n  const presetType = targetElement.dataset?.preset;\n\n  const formElement = $(targetElement).parents('form');\n\n  const damage = parseInt(formElement?.find('[name=\"damage_amount\"]').val());\n\n  const resistDmg = formElement?.find('[name=\"has_resistance\"]').prop(\"checked\");\n  const exposed = formElement?.find('[name=\"is_exposed\"]').prop(\"checked\");\n  const armorPiercing = formElement?.find('[name=\"attack_is_piercing\"]').prop(\"checked\");\n\n  const selectedTokens = canvas.tokens.controlled;\n\n  if (damage === \"\") {\n    return \"Damage must be a number.\";\n  }\n\n  const attackType = targetElement.value;\n\n  if (!isNaN(damage) && damage > 0) {\n    selectedTokens.forEach(token => {\n      let name = token.name;\n      let armor = token.actor.system.armor;\n      let hp = token.actor.system.hp.value;\n      let heat = token.actor.system.heat.value;\n      let burn = token.actor.system.burn;\n      let overshield = token.actor.system.overshield.value;\n      let tokenURL = token.actor.img;\n\n      let overshieldRemain = 0;\n\n      let effects = \"\";\n      let dmgType = \"\";\n      let tempdamage = 0;\n      let newVal = 0;\n      let remain = \"HP\";\n\n      // BASIC DAMAGE HANDLING\n      if (attackType === \"Weapon\") {\n        //use a new variable here so that it doesn't actually alter damage for the other parts of the loop.\n        tempdamage = damage;\n        dmgType = \"Damage\";\n        remain = \"HP\";\n        //if exposed, double damage.\n        if (exposed) {\n          tempdamage = tempdamage * 2;\n        }\n\n        //if not armorpiercing, factor in armor.\n        if (!armorPiercing) {\n          tempdamage = Math.max(tempdamage - armor, 0); //subtract armor\n        }\n\n        //if resistance, halve damage, rounding up.\n        // order matters, of course- lancer is Exposed -> armor -> resistance.\n        if (resistDmg) {\n          tempdamage = Math.ceil(tempdamage / 2)\n        }\n\n        effects = effects + `[Armor: ${armor}] `;\n        overshieldRemain = overshield - tempdamage;\n\n        if (overshield > 0 && overshieldRemain >= 0) {\n          //case 1 - has overshield, damage doesn't break shield\n          token.actor.update({ \"system.overshield\": overshieldRemain });\n          effects = effects + `[Overshield: ${overshield} -> ${overshieldRemain}] `;\n          tempdamage = 0;\n\n        } else if (overshield > 0 && overshieldRemain < 0) {\n          //case 2: has overshield, damage breaks overshield and deals real damage\n          token.actor.update({ \"system.overshield\": 0 });\n          effects = effects + `[Overshield: ${overshield} -> 0] `;\n          tempdamage = tempdamage - overshield;\n\n        }\n\n        if (resistDmg) {\n          effects = effects + `[Dmg Resistance (x1/2)] `;\n        }\n\n        if (exposed) {\n          effects = effects + `[Exposed (x2)] `;\n        }\n\n        if (armorPiercing) {\n          effects = effects + `[Armor Piercing] `;\n        }\n\n        token.actor.update({ \"system.hp.value\": hp - tempdamage });\n        newVal = hp - tempdamage;\n\n      } else if (attackType === \"Burn\") {\n        // BURN HANDLING\n        tempdamage = damage; //pierces armor.\n        dmgType = \"Burn\";\n        remain = \"HP\";\n        let burndamage = damage;\n        /* unfortunately there's a bit of complexity here.\n        Tempdamage is the 'current running total' of damage,\n        i.e after resistance and overshield reductions.\n        But the amount of burn you gain shouldn't count overshield, \n        so we need a second variable to track it- hence burn damage.\n        */\n\n        // burn can be resisted\n        if (resistDmg) {\n          tempdamage = Math.ceil(tempdamage / 2)\n        }\n\n        burndamage = tempdamage;\n        effects = effects + `[Burn: ${burndamage}] `;\n        overshieldRemain = overshield - tempdamage;\n\n        if (overshield >= 0 && overshieldRemain >= 0) {\n          token.actor.update({ \"system.overshield\": overshield - tempdamage });\n          effects = effects + `[Overshield: ${overshield} -> ${overshieldRemain}] `;\n          tempdamage = 0;\n\n        } else if (overshield > 0 && overshieldRemain < overshield) {\n          token.actor.update({ \"system.overshield\": 0 });\n          effects = effects + `[Overshield: ${overshield} -> 0] `;\n          tempdamage = tempdamage - overshield;\n\n        }\n\n        if (resistDmg) {\n          effects = effects + `[Burn Resistance (x1/2)] `;\n        }\n\n        //hp damage taken might be reduced by overshield, but burn gained is not.\n        token.actor.update({ \"system.hp.value\": hp - tempdamage, \"system.burn\": burn + burndamage});\n        newVal = hp - tempdamage;\n\n      } else if (attackType === \"Heat\") {\n        // HEAT HANDLING\n        tempdamage = damage;\n        dmgType = \"Heat\";\n        remain = \"Heat\";\n        // I suppose heat can be resisted too.\n        if (resistDmg) {\n          tempdamage = Math.ceil(tempdamage / 2);\n          effects = effects + `[Heat Resistance (x1/2)] `;\n        }\n\n        if (heat + tempdamage >= token.actor.system.heat.max / 2) {\n          effects = effects + `[DANGER ZONE] `;\n        }\n        newVal = heat + tempdamage;\n\n        token.actor.update({ \"system.heat.value\": heat + tempdamage });\n\n      }\n\n\n\n      let msgContent = `<div class=\"card clipped-bot\" style=\"margin: 0px;\">\n\t\t\t\t<div class=\"card clipped\">\n\t\t\t\t\t<div class=\"lancer-mini-header\" >// DAMAGE APPLIED //</div>\n\t\t\t\t\t\t<div class=\"lancer-hit\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<img class=\"lancer-hit-thumb\" src=\"${tokenURL}\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"lancer-hit-text\">\n\t\t\t\t\t\t\t\t<span class=\"lancer-hit-text-name\">${name} has taken\n\t\t\t\t\t\t\t\t${tempdamage} ${dmgType} (New Value: ${newVal} ${remain})</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card clipped\">\n\t\t\t\t\t<div class=\"lancer-mini-header\">// DAMAGE MODS //</div>\n\t\t\t\t\t<span class=\"effect-text\">${effects}</span>\n\t\t\t\t</div>\n\t\t\t</div>`\n\n      ChatMessage.create({ //comment this part out if you don't want stuff whispered to chat.\n        content: msgContent,\n        whisper: ChatMessage.getWhisperRecipients(\"GM\")\n      });\n    });\n\n    const formData = new FormDataExtended(html[0].querySelector('form')).object;\n    ui.activeWindow.close();\n    return formData;\n  } else {\n    ui.notifications.warn(\"Damage must be a positive number.\");\n    return \"Damage must be a number.\";\n  }\n  return null;\n}\n\nasync function promptForDamage() {\n  return new Promise((resolve) => {\n    const dialog = new Dialog({\n      title: \"Apply Damage to Selected Token\",\n      content: htmlFormContent,\n      buttons: {},\n      render: (html) => {\n        html.on('click', 'button[name=\"dmgType\"]', (event) => {\n          let clickResult = handleButtonClick(html, event);\n\n          if (clickResult === null) {\n            resolve(null);\n          } else if (typeof clickResult === \"string\") {\n            resolve(null);\n          } else {\n            resolve(clickResult);\n          }\n        });\n      },\n      close: () => {\n        resolve('User closed dialog without making a selection.');\n      },\n    });\n    dialog.render(true);\n  });\n}\n\nconst damage = await promptForDamage();",
  "flags": {
    "advanced-macros": {
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "lancer-voidstorm",
      "system": "lancer",
      "coreVersion": "11.315",
      "systemVersion": "2.2.4"
    }
  },
  "_stats": {
    "systemId": "lancer",
    "systemVersion": "2.2.4",
    "coreVersion": "11.315",
    "createdTime": 1725671170547,
    "modifiedTime": 1726955860563,
    "lastModifiedBy": "MvcpNQWP7WQx6BPR"
  }
}