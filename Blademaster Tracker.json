{
  "name": "Blademaster (Dice)",
  "type": "script",
  "scope": "global",
  "author": "MvcpNQWP7WQx6BPR",
  "img": "icons/weapons/swords/swords-cutlasses-white.webp",
  "command": "// Cancel the macro if no token is selected\nif(canvas.tokens.controlled.length != 1)\n    return ui.notifications.error(\"Select 1 token. You have \" + canvas.tokens.controlled.length + \" selected.\");\n\n// Button values\nconst increment = \"inc\";\nconst parry = \"parry\";\nconst deflect = \"deflect\";\nconst feint = \"feint\";\nconst trip = \"trip\";\n\n// Icon names and paths\nconst dieId = \"blademaster_die\";\nconst diePath = CONFIG.statusEffects.find(x => x.id === dieId).icon; // filepath of icon\n\n// Get the count of the die\nlet count = await EffectCounter.findCounterValue(token.document, diePath) ?? 0;\n\n// Disable buttons if no die count\nlet buttonsEnabled = ``;\nif(count < 1){\n    buttonsEnabled = `disabled`;\n}\n\n// HTML body for the dialog window\nlet htmlFormContent = `<form class=\"lancer accdiff window-content\">\n<div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\"><b>Current count: ${count}</b></div>\n<div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\">\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${increment}\" type=\"button\" style=\"background-color: #333333; color: white;\">\n            <i class=\"fa-solid fa-arrow-up\" style=\"color:white\"></i></br>Increment Die\n        </button>\n    </div>\n</div>\n<div class=\"flexrow\" style=\"padding-top: 4px;\"><b>Use Die</b></div>\n<div class=\"flexrow\" style=\"padding-top: 4px;\">\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${parry}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-otter\" style=\"color:white\"></i></br>Parry\n        </button>\n    </div>\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${deflect}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-person-walking-arrow-loop-left\" style=\"color:white\"></i></br>Deflect\n        </button>\n    </div>\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${feint}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-person-falling-burst\" style=\"color:white\"></i></br>Feint\n        </button>\n    </div>\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${trip}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-car-side\" style=\"color:white\"></i></br>Trip\n        </button>\n    </div>\n</div>\n<div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\"></div>\n<div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"cancel\" type=\"button\" style=\"background-color: #333333; color: white;\">\n            <i class=\"cci cci-reticule i--l\" style=\"color:white\"></i></br>Close\n        </button>\n</div>\n</form>`;\n\n// Content for the chat message. It is set to roll for if the user selects deflect which rolls d6s\nlet chatObject = { \n    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n    speaker: ChatMessage.getSpeaker({\n        actor: game.macros.getName(\"Get-Speaker\").execute()\n    })\n};\n\n// Button click handler for main dialog window\nasync function handleButtonClick(html, event) {\n    const targetElement = event.currentTarget;\n    let button = targetElement.value;\n    \n    // Chat Message Building\n    let chatTitle = \"Blademaster\"\n    let description = \"\"\n                      \n    switch(button){\n        case increment:{\n            // Apply icon if not already, then set to it to the default\n            if(count < 3){\n                if(count < 1){\n                    count++;\n                    await game.macros.getName(\"toggleCondition\").execute({tokenId:token.id, condition:dieId, replace:false});\n                }else{\n                    count++;\n                    await EffectCounter.findCounter(token, diePath).setValue(count);\n                }\n                // Chat\n                description = \"Blademaster die incremented!\";\n            }else{\n                // Chat\n                description = \"Blademaster die can't be incremented past 3!\";\n            }\n            break;\n        }\n        case parry:{\n            // Decrement die\n            count--;\n            await EffectCounter.findCounter(token, diePath).setValue(count);\n            // Chat\n            chatTitle += \" PARRY\";\n            description = \"As a reaction when you’re hit by a melee attack, you gain Resistance to all damage, heat, and burn dealt by the attack.\";\n            break;\n        }\n        case deflect:{\n            // This one is a little more complicated. \n            // We gotta prompt for how many dice the user wants to use,\n            // get that amount, roll that amount of dice, \n            // and then subtract that amount from the mech\n            \n            ui.activeWindow.close(); // close the main window so user doesn't select anything else\n\n            let promptOptions = `<option value=\"0\">0</option>`;\n            \n            // Build option list\n            for (let i = 1; i <= count; i++) {\n                promptOptions += `<option value=\"${i}\">${i}</option>`;\n            }\n            // Build dialog\n            let promptBody =`\n                            <label for=\"amount\">Choose the amount of blademaster dice you want to use:</label>\n                            <select name=\"Amount\" id=\"amount\"> \n                                ${promptOptions}\n                            </select>`;\n            let result = await Dialog.prompt({\n                title: \"Enter Deflect Amount\",\n                content: promptBody,\n                label: \"Confirm\",\n                callback: (html) => {\n                    return +html[0].querySelector(\"select\").value ?? 0; }\n            });\n\n            // Roll however many dice were rolled.\n            let roll = new Roll(result + \"d6\");\n            let rolls = \"You rolled: \";\n            let success = false;\n            await roll.evaluate();\n            \n            // Success logic \n            roll.dice[0].results.forEach(die => {\n                if(die.result >= 5){\n                    success = true;\n                }\n                rolls += die.result + \" \";\n            });\n\n            chatObject[\"rolls\"] = [roll];\n\n            // Decrement by how many dice were selected\n            count -= result;\n            await EffectCounter.findCounter(token, diePath).setValue(count);\n\n            // Chat\n            chatTitle += \" DEFLECT\";\n            description = \"As a reaction when you’re hit by a ranged attack, you may roll any number of Blademaster Dice, expending them: if you roll a 5+ on any of these dice, you gain Resistance to all damage, heat, and burn dealt by the attack.\";\n            if(success) description += \" RESULT: SUCCESS (\" + rolls + \")\";\n            else description += \" RESULT: FAILURE (\" + rolls + \")\";\n            break;\n        }\n        case feint:{\n            // Decrement die\n            count--;\n            await EffectCounter.findCounter(token, diePath).setValue(count);\n            // Chat\n            chatTitle += \" FEINT\";\n            description = \"As a free action, choose an adjacent character: when moving, you ignore engagement and don’t provoke reactions from your target until the start of your next turn.\";\n            break;\n        }\n        case trip:{\n            // Decrement die\n            count--;\n            await EffectCounter.findCounter(token, diePath).setValue(count);\n            // Chat\n            chatTitle += \" TRIP\";\n            description = \"As a quick action, choose an adjacent character: they must pass an Agility save or fall Prone. Whatever the result, you may freely pass through their space until the end of your current turn, although you can’t end your turn in their space.\";\n            break;\n        }\n        case \"cancel\":{\n            // Close window\n            ui.activeWindow.close();\n            return null;\n        }\n    }\n    \n    // Build chat message \n    let msgContent = `<div class=\"card clipped-bot\" style=\"margin: 0px;\">\n                        <div class=\"card clipped\">\n\t                    <div class=\"lancer-mini-header\" >${chatTitle}</div>\n\t                        <div class=\"lancer-mini-header\"> // EFFECT // </div>\n\t                    <div class=\"effect-text\">\n\t                        <ul>${description}</ul>\n\t                    </div>\n                        </div>\n                      </div>`\n\n    chatObject[\"content\"] = msgContent;\n    ChatMessage.create(chatObject);\n    return button;\n}\n\n// Our main dialog\nasync function promptForUse() {\n  return new Promise(async (resolve) => {\n      const dialog = new Dialog({\n      title: \"Blademaster Options\",\n      content: htmlFormContent,\n      buttons: {},\n      render: async (html) => {\n        html.on('click', 'button[name=\"dmgType\"]', async (event) => {\n          let clickResult = await handleButtonClick(html, event);\n          if (clickResult === null) {\n            resolve(null);\n            ui.activeWindow.close();\n          } else if (typeof clickResult === \"string\") {\n            resolve(clickResult);\n            ui.activeWindow.close();\n          } else {\n            resolve(null);\n            ui.activeWindow.close();\n          }\n        });\n      },\n      close: () => {\n        resolve('User closed the window.');\n      },\n    });\n    dialog.render(true);\n  });\n}\n\n// We want to refresh the window everytime increment is selected\nlet use = increment;\nwhile(use === increment){\n    use = await promptForUse();\n    // Update count & HTML\n    // This is messy but I dunno how else to do it right now\n    count = EffectCounter.findCounterValue(token.document, diePath) ?? 0;\n    if(count < 1){\n        buttonsEnabled = `disabled`;\n    }else buttonsEnabled = ``;\n    htmlFormContent = `<form class=\"lancer accdiff window-content\">\n<div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\"><b>Current count: ${count}</b></div>\n<div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\">\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${increment}\" type=\"button\" style=\"background-color: #333333; color: white;\">\n            <i class=\"fa-solid fa-arrow-up\" style=\"color:white\"></i></br>Increment Die\n        </button>\n    </div>\n</div>\n<div class=\"flexrow\" style=\"padding-top: 4px;\"><b>Use Die</b></div>\n<div class=\"flexrow\" style=\"padding-top: 4px;\">\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${parry}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-otter\" style=\"color:white\"></i></br>Parry\n        </button>\n    </div>\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${deflect}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-person-walking-arrow-loop-left\" style=\"color:white\"></i></br>Deflect\n        </button>\n    </div>\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${feint}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-person-falling-burst\" style=\"color:white\"></i></br>Feint\n        </button>\n    </div>\n    <div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"${trip}\" type=\"button\" style=\"background-color: #333333; color: white;\" ${buttonsEnabled}>\n            <i class=\"fa-solid fa-car-side\" style=\"color:white\"></i></br>Trip\n        </button>\n    </div>\n</div>\n<div class=\"flexrow lancer-border-primary\" style=\"padding-bottom: 4px;\"></div>\n<div class=\"flexcol\">\n        <button name=\"dmgType\" value=\"cancel\" type=\"button\" style=\"background-color: #333333; color: white;\">\n            <i class=\"cci cci-reticule i--l\" style=\"color:white\"></i></br>Close\n        </button>\n</div>\n</form>`;\n}",
  "folder": "l5AhmXZBrmXkYXTg",
  "flags": {
    "advanced-macros": {
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "lancer-voidstorm",
      "system": "lancer",
      "coreVersion": "11.315",
      "systemVersion": "2.2.4"
    }
  },
  "_stats": {
    "systemId": "lancer",
    "systemVersion": "2.2.4",
    "coreVersion": "11.315",
    "createdTime": 1725741182267,
    "modifiedTime": 1726189048304,
    "lastModifiedBy": "MvcpNQWP7WQx6BPR"
  }
}