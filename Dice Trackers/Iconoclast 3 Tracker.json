{
  "name": "Iconoclast 3 (Dice)",
  "type": "script",
  "scope": "global",
  "author": "MvcpNQWP7WQx6BPR",
  "img": "icons/magic/symbols/runes-triangle-blue.webp",
  "command": "// Cancel the macro if no token is selected\nif(canvas.tokens.controlled.length != 1)\n    return ui.notifications.error(\"Select 1 token. You have \" + canvas.tokens.controlled.length + \" selected.\");\n\n// Icon names and paths\nconst dieId = \"transcendence_die\";\nconst diePath = CONFIG.statusEffects.find(x => x.id === dieId).icon;\nconst transId = \"transcendence\";\nconst transPath = CONFIG.statusEffects.find(x => x.id === transId).icon;\n\n// Need to apply icon before SIC can work\n// This also means we are at the first stage\nif(!token.document.hasStatusEffect(dieId)){\n    await game.macros.getName(\"toggleCondition\").execute({tokenId:token.id, condition:dieId, replace:false});\n    await EffectCounter.findCounter(token, diePath).setValue(3); // Set icon to 3 for Iconoclast 3\n}\n\n// Fire this if user clicks memetic spark button\nasync function performMemeticSpark(html){\n    // Memetic Spark\n    let range = 3;\n    let damage = 1;\n    let bonusText = \"\";\n\n    // Apply damage increases\n    let nhpCount = await game.macros.getName(\"Get-Alive-NHP-Count\").execute();\n    damage += nhpCount;\n\n    // Apply Transcendence Effects\n    if(token.document.hasStatusEffect(transId)){\n        damage += 4;\n        range += 5;\n        bonusText += \" and +4 damage for Transcendence\"\n    }\n\n    // Apply resistance\n    if(html[0].querySelector(\"input[name='resistance']:checked\")){\n        damage = Math.ceil(damage / 2);\n        bonusText += \" and halved for resistance\";\n    }\n\n    // Get the count of the die\n    let count = await EffectCounter.findCounterValue(token.document, diePath) ?? 3;\n    // Check if it is above 3, if it is reset it to 3.\n    if(count > 3){\n        count = 3;\n        await EffectCounter.findCounter(token, diePath).setValue(count);\n    }\n\n    // Place line template\n    // Memetic spark isn't a line but I AM LAZY so line 0\n    const template = await game.lancer.canvas.WeaponRangeTemplate.fromRange({\n        type: \"Blast\",\n        val: 0,\n    }).placeTemplate()\n\n    // If the template is placed, lets continue\n    if (template) {\n        // Get the targets from the template\n        game.lancer.targetsFromTemplate(template.id);\n        let target = game.user.targets.first();\n        \n        // Effects we are going to use\n        await Sequencer.Preloader.preloadForClients([\n            \"modules/lancer-weapon-fx/soundfx/NexusFire.ogg\",\n            \"jb2a.lightning_bolt.wide.blue\",\n        ]);\n\n        //Sequencer\n        let sequence = new Sequence();\n        sequence\n            .sound()\n                .file(\"modules/lancer-weapon-fx/soundfx/NexusFire.ogg\")\n                .delay(500)\n                .volume(game.modules.get(\"lancer-weapon-fx\").api.getEffectVolume(0.5));\n        sequence\n            .effect()\n                .atLocation(target)\n                .file('modules/JB2A_DnD5e/Library/Generic/Lightning/LightningStrike01_01_Regular_Blue_800x800.webm')\n                .randomizeMirrorX()\n                .randomizeMirrorX()\n                .name(\"bolt\")\n                .scale(1.5)\n                .addOverride(async (effect, data) => {\n                    if(damage === 5){\n                        data[\"tint\"] = \"#FF0000\";\n                    }\n                    return data;\n                })\n        sequence.play();\n\n        // Do damage to targetted tokens\n        let tokenImages = await doDamage(damage);\n\n        // Chat Message\n        let chatTitle = \"MEMETIC SPARK\"\n        let msgContent = `\n                        <div class=\"lancer-header lancer-weapon medium\">\n                            <i class=\"cci cci-weapon i--m i--light\"> </i>\n                            <span>${chatTitle}</span>\n                        </div>\n                        <div class=\"card clipped-bot\" style=\"margin: 0px;\">\n                            <div class=\"mini-weapon-profile flexrow\">\n                                <div class=\"mini-weapon-profile-range flexrow\">\n                                    <span data-tooltip=\"Range\"><i class=\"cci cci-range\"></i>${range}</span>\n                                </div>\n                                <span class=\"mini-weapon-profile-separator\">//</span>\n                                    <div class=\"mini-weapon-profile-damage flexrow\">\n                                        <span data-tooltip=\"Energy\"><i class=\"cci cci-energy damage--energy\"></i>${damage}</span>\n                                    </div>\n                            </div>\n                            <div class=\"card clipped\">\n                                <div class=\"lancer-mini-header\" >// EFFECT //</div>\n                                    <div class=\"lancer-hit\">\n                                        <span>(Added +${nhpCount} damage for ${nhpCount} alive NHPs${bonusText})</span>\n                                    </div>\n                                    <div class=\"lancer-hit\">\n                                        <span>${tokenImages}</span>\n                                        <div class=\"lancer-hit-text\">\n                                                <span class=\"lancer-hit-text-name\"> has taken ${damage} AP <i class=\"cci cci-energy i--m damage--energy\"></i></span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>`\n        ChatMessage.create({ content: msgContent });\n\n        ui.notifications.info(\"Now perform Transmuting spark.\");\n        await performTransmutingSpark(html);\n    }\n}\n\n// Fire this if user clicks transmuting spark button\nasync function performTransmutingSpark(html){\n    // Transmuting Spark\n    let range = 3; // size of line\n    let damage = 2; // damage number to display\n\n    // Resistance\n    if(html[0].querySelector(\"input[name='resistance']:checked\")){\n        damage = 1;\n    }\n    \n    // Get the count of the die\n    let count = EffectCounter.findCounterValue(token.document, diePath) ?? 3;\n    // Check if it is above 3, if it is reset it to 3.\n    if(count > 3){\n        count = 3;\n        await EffectCounter.findCounter(token, diePath).setValue(count);\n    }\n    \n    // Place line template\n    ui.notifications.info(\"Remember you can rotate the line using the mouse wheel.\")\n    const template = await game.lancer.canvas.WeaponRangeTemplate.fromRange({\n        type: \"Line\",\n        val: range,\n    }).placeTemplate()\n\n    // If the template is placed, lets continue\n    if (template) {\n        // Get the targets from the template\n        game.lancer.targetsFromTemplate(template.id);\n\n        // Decrease the transcendence die\n        await decrementDie(count);\n        \n        // Effects we are going to use\n        await Sequencer.Preloader.preloadForClients([\n            \"modules/lancer-weapon-fx/soundfx/NexusFire.ogg\",\n            \"jb2a.lightning_bolt.wide.blue\",\n        ]);\n\n        //Sequencer\n        let sequence = new Sequence();\n        sequence\n            .sound()\n                .file(\"modules/lancer-weapon-fx/soundfx/NexusFire.ogg\")\n                .delay(1000)\n                .volume(game.modules.get(\"lancer-weapon-fx\").api.getEffectVolume(0.5));\n        sequence\n            .effect()\n                .file(\"jb2a.lightning_bolt.wide.blue\")\n                .scale(.5)\n                .atLocation(token)\n                .startTime(0)\n                .rotateTowards(template)\n                .name(\"bolt\")\n                .addOverride(async (effect, data) => {\n                    if((token.document.hasStatusEffect(transId))){\n                        data[\"tint\"] = \"#FF0000\";\n                    }\n                    return data;\n                })\n        sequence.play();\n\n        // Do damage to targetted tokens\n        let tokenImages = await doDamage(damage);\n\n        // Chat Message\n        let chatTitle = \"TRANSMUTING SPARK\"\n        let msgContent = `\n                        <div class=\"lancer-header lancer-weapon medium\">\n                            <i class=\"cci cci-weapon i--m i--light\"> </i>\n                            <span>${chatTitle}</span>\n                        </div>\n                        <div class=\"card clipped-bot\" style=\"margin: 0px;\">\n                            <div class=\"mini-weapon-profile flexrow\">\n                                <div class=\"mini-weapon-profile-range flexrow\">\n                                    <span data-tooltip=\"Range\"><i class=\"cci cci-range\"></i>${range}</span>\n                                </div>\n                                <span class=\"mini-weapon-profile-separator\">//</span>\n                                    <div class=\"mini-weapon-profile-damage flexrow\">\n                                        <span data-tooltip=\"Energy\"><i class=\"cci cci-energy damage--energy\"></i>${damage}</span>\n                                    </div>\n                            </div>\n                            <div class=\"card clipped\">\n                                <div class=\"lancer-mini-header\" >// EFFECT //</div>\n                                    <div class=\"lancer-hit\">\n                                        <span>${tokenImages}</span>\n                                        <div class=\"lancer-hit-text\">\n                                                <span class=\"lancer-hit-text-name\"> has taken ${damage} AP <i class=\"cci cci-energy i--m damage--energy\"></i></span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>`\n        ChatMessage.create({ content: msgContent });\n    }\n}\n\n// Helper function so we aren't repeating a lot of code\n// Accounts for overshield\n// params: damage (number)\n// returns the list of token images that were damaged\nasync function doDamage(damage){\n    // Setup images of tokens targetted.\n    let tokenImages = ``;\n    // Do Damage to Targets\n    for(let target of game.user.targets){\n        // Don't target self\n        if(target.id === token.id){\n            break;\n        }\n        // Damage Overshield\n        let overshield = target.document.actor.system.overshield.value;\n        let hp = target.document.actor.system.hp.value;\n        let overshieldRemain = overshield - damage;\n        let tempdamage = damage;\n\n        if (overshield > 0 && overshieldRemain >= 0) {\n        //case 1 - has overshield, damage doesn't break shield\n        let updateValues = [\"system.overshield\", overshieldRemain];\n        game.macros.getName(\"updateToken\").execute({tokenId:target.id, args:updateValues});\n        tempdamage = 0;\n\n        } else if (overshield > 0 && overshieldRemain < 0) {\n        //case 2: has overshield, damage breaks overshield and deals real damage\n        overshieldRemain = 0;\n        let updateValues = [\"system.overshield\", overshieldRemain];\n        game.macros.getName(\"updateToken\").execute({tokenId:target.id, args:updateValues});\n        tempdamage = tempdamage - overshield;\n        }\n        // Update HP\n        // Run structure if HP would go below zero\n        if(target.document.actor.system.structure.value == 1 && hp - tempdamage <= 0){\n            let updateValues = [\"system.hp.value\", 0];\n            game.macros.getName(\"updateToken\").execute({tokenId:target.id, args:updateValues});\n        }\n        else{\n            let updateValues = [\"system.hp.value\", (hp - tempdamage)];\n            game.macros.getName(\"updateToken\").execute({tokenId:target.id, args:updateValues});\n        }\n        // Add token image to list\n        tokenImages += `<div>\n                <img class=\"lancer-hit-thumb\" src=\"${target.actor.img}\"/>\n            </div>`\n    }\n    return tokenImages;\n}\n\n// Helper function\n// params:\n// count (number) - the current count of the transcendence die\nasync function decrementDie(count){\n    // Decrement Transcendence Die unless in Transcendence\n    if(count != 1 && !token.document.hasStatusEffect(transId)){\n        count--;\n        await EffectCounter.findCounter(token, diePath).setValue(count);\n    }else{\n        // Apply Transcendence\n        count = 3;\n        await EffectCounter.findCounter(token, diePath).setValue(count);\n        await game.macros.getName(\"toggleCondition\").execute({tokenId:token.id, condition:transId, replace:false});\n    }\n}\n\n// Our main dialog\nlet d = new Dialog({\n title: \"Iconoclast\",\n content:`\n            <p><span class=horus--subtle><i>ARE DREAMS AND REALITY REALLY SO UNLIKE?</i></span></p>\n            <p><span class=horus--subtle><i>CHOOSE</i></span></p>\n            <div>\n                <input type=\"checkbox\" value=\"resistance\" name=\"resistance\"/>\n                <label>Targets have energy resistance</label>\n            </div>\n            <div>\n                </br>\n            </div>\n         `,\n buttons: {\n  transmuting: {\n   label: \"Perform Transmuting Spark\",\n   callback: async(html) => {\n       await performTransmutingSpark(html);\n   }\n  },\n  memetic: {\n   label: \"Perform Memetic Spark\",\n   callback: async(html) => {\n       await performMemeticSpark(html);\n   }\n  }\n },\n default: \"transmuting\",\n render: html => console.log(\"Register interactivity in the rendered dialog\"),\n close: html => console.log(\"This always is logged no matter which option is chosen\")\n});\nd.render(true);",
  "folder": "l5AhmXZBrmXkYXTg",
  "flags": {
    "condition-lab-triggler": {
      "macroTrigger": ""
    },
    "advanced-macros": {
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "lancer-voidstorm",
      "system": "lancer",
      "coreVersion": "11.315",
      "systemVersion": "2.2.4"
    }
  },
  "_stats": {
    "systemId": "lancer",
    "systemVersion": "2.2.4",
    "coreVersion": "11.315",
    "createdTime": 1725206004116,
    "modifiedTime": 1726243841826,
    "lastModifiedBy": "MvcpNQWP7WQx6BPR"
  }
}
